{"version":3,"file":"unescape.js","sourceRoot":"","sources":["../../src/unescape.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,sBAAsB,EAAE,MAAM,kBAAkB,CAAA;AAEzD;;;;;;;;;;;;;GAaG;AACH,MAAM,CAAC,MAAM,QAAQ,GAAG,CACtB,CAAS,EACT,EACE,oBAAoB,GAAG,KAAK,MACsB,EAAE,EACtD,EAAE;IACF,OAAO,oBAAoB;QACzB,CAAC,CAAC,sBAAsB,CAAC,CAAC,EAAE,gBAAgB,EAAE,IAAI,CAAC;QACnD,CAAC,CAAC,sBAAsB,CACpB,sBAAsB,CAAC,CAAC,EAAE,2BAA2B,EAAE,MAAM,CAAC,EAC9D,YAAY,EACZ,IAAI,CACL,CAAA;AACP,CAAC,CAAA","sourcesContent":["import { MinimatchOptions } from './index.js'\nimport { StringPrototypeReplace } from 'node-primordials'\n\n/**\n * Un-escape a string that has been escaped with {@link escape}.\n *\n * If the {@link windowsPathsNoEscape} option is used, then square-brace\n * escapes are removed, but not backslash escapes.  For example, it will turn\n * the string `'[*]'` into `*`, but it will not turn `'\\\\*'` into `'*'`,\n * becuase `\\` is a path separator in `windowsPathsNoEscape` mode.\n *\n * When `windowsPathsNoEscape` is not set, then both brace escapes and\n * backslash escapes are removed.\n *\n * Slashes (and backslashes in `windowsPathsNoEscape` mode) cannot be escaped\n * or unescaped.\n */\nexport const unescape = (\n  s: string,\n  {\n    windowsPathsNoEscape = false,\n  }: Pick<MinimatchOptions, 'windowsPathsNoEscape'> = {}\n) => {\n  return windowsPathsNoEscape\n    ? StringPrototypeReplace(s, /\\[([^\\/\\\\])\\]/g, '$1')\n    : StringPrototypeReplace(\n        StringPrototypeReplace(s, /((?!\\\\).|^)\\[([^\\/\\\\])\\]/g, '$1$2'),\n        /\\\\([^\\/])/g,\n        '$1'\n      )\n}\n"]}